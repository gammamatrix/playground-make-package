<?php
/**
 * {{ organization }}
 */

declare(strict_types=1);
namespace {{ namespace }};

use Illuminate\Foundation\Console\AboutCommand;
use Illuminate\Foundation\Support\Providers\AuthServiceProvider;

/**
 * \{{ namespace }}\ServiceProvider
 */
class ServiceProvider extends AuthServiceProvider
{
    public const VERSION = '{{ version }}';

    public string $package = '{{ package }}';

    /**
     * The policy mappings for the application.
     *
     * @var array
     */
    protected $policies = [
{{ policies }}
    ];

    /**
     * Bootstrap any package services.
     * Register any authentication / authorization services.
     *
     * @return void
     */
    public function boot()
    {
        /**
         * @var array<string, mixed> $config
         */
        $config = config($this->package);

        if (! empty($config['load']) && is_array($config['load'])) {

            if (! empty($config['load']['translations'])) {
                $this->loadTranslationsFrom(
                    dirname(__DIR__).'/lang',
                    $this->package
                );
            }

            if ($this->app->runningInConsole()) {
                // Publish configuration
                $this->publishes([
                    sprintf('%1$s/config/%2$s.php', dirname(__DIR__), $this->package) => config_path(sprintf('%1$s.php', $this->package)),
                ], 'playground-config');
            }
        }

        // { {routes} }
        // $this->loadRoutesFrom(dirname(__DIR__).'/routes/matrix.php');

    }

    /**
     * Register any application services.
     */
    public function register(): void
    {
        $this->mergeConfigFrom(
            dirname(__DIR__).'/config/{{ package }}.php',
            '{{ package }}'
        );
    }

    public function version(): string
    {
        return static::VERSION;
    }
}
